Index: proyecto 1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Dic_inventario={}\r\ndef main():\r\n    inven = Inventario()\r\n    order = Ordenar()\r\n    bus = Buscar()\r\n\r\n    op = 0\r\n    while op != 6:\r\n        try:\r\n            print(\"\\nMenu principal\")\r\n            print(\"1. Ingreso de producto\")\r\n            print(\"2. Listar Inventario\")\r\n            print(\"3. Buscar producto\")\r\n            print(\"4. Eliminar producto\")\r\n            print(\"5. Modificar producto\")\r\n            print(\"6. Salir \")\r\n            op=int(input(\"Ingrese opcion a ejecutar:   \"))\r\n            match op:\r\n                case 1:\r\n                     inven.Agregar()\r\n                case 2:\r\n                    Submenu()\r\n                    ordenar=int(input(\"Ingrese una opción\"))\r\n                    lista_nombre = [inventario[\"nombre\"] for inventario in Dic_inventario.values()]\r\n                    lista_stock = [inventario[\"stock\"] for inventario in Dic_inventario.values()]\r\n                    lista_precio = [inventario[\"precio\"] for inventario in Dic_inventario.values()]\r\n                    if ordenar == 1:\r\n                        listaordenada=[order.quicksort(lista_nombre)]\r\n                    elif ordenar == 2:\r\n                        listaordenada=[order.quicksort(lista_precio)]\r\n                    elif ordenar == 3:\r\n                        listaordenada=[order.quicksort(lista_stock)]\r\n\r\n                    if not listaordenada:\r\n                        print(\"\\n Inventario actual:\")\r\n                        for producto in Dic_inventario.values():\r\n                            producto.Mostrar()\r\n                    else:\r\n                        print(\" Inventario vacío.\")\r\n\r\n                case 3:\r\n                    SubmenuBuscador()\r\n                    buscar= int(input(\"Ingrese una opción\"))\r\n                    valor_a_buscar = input(\"Ingrese valor a buscar\")\r\n                    lista_nombre = [inventario[\"nombre\"] for inventario in Dic_inventario.values()]\r\n                    lista_codigo = list(Dic_inventario.keys())\r\n                    lista_categoria= [inventario[\"categoria\"] for inventario in Dic_inventario.values()]\r\n                    if buscar==1:\r\n                        bus.Buscardor(lista_codigo,buscar,valor_a_buscar)\r\n                    elif buscar==2:\r\n                        bus.Buscardor(lista_nombre, buscar, valor_a_buscar)\r\n                    elif buscar==3:\r\n                        bus.Buscardor(lista_categoria, buscar, valor_a_buscar)\r\n\r\n                case 4:\r\n                    inven.eliminar()\r\n                case 5:\r\n                    inven.actualizar()\r\n                case 6:\r\n                    print(\"Fin de programa\")\r\n                case _:\r\n                    print(\"Opcion no valida\")\r\n        except ValueError:\r\n            print(\"Ingrese opcion valida\")\r\n        except Exception:\r\n            print(f\"Error: {Exception}\")\r\n\r\n\r\nclass Producto:\r\n    def __init__(self, codigo,nombre,categoria,precio,stock):\r\n        self.codigo=codigo\r\n        self.nombre=nombre\r\n        self.categoria=categoria\r\n        self.precio=precio\r\n        self.stock=stock\r\n\r\n    def Mostrar(self):\r\n        print(f\"Codigo:{self.codigo}- Nombre: {self.nombre}- Categoria: {self.categoria}- Precio:{self.precio}- Stock: {self.stock}\")\r\n\r\n\r\nclass Ordenar:\r\n    def quicksort(self, lista):\r\n        if len(lista) <= 1:\r\n            return lista\r\n        pivote = lista[0]\r\n\r\n        menores = [x for x in lista[1:] if x < pivote]\r\n        iguales = [x for x in lista if x == pivote]\r\n        mayores = [x for x in lista[1:] if x > pivote]\r\n\r\n        return self.quicksort(menores) + iguales + self.quicksort(mayores)\r\n\r\nclass Buscar:\r\n    def Buscardor(self, lista, criterio, valor):\r\n        resultados = []\r\n        valor = valor.lower().strip()\r\n\r\n        for producto in lista:\r\n            if criterio == 1:\r\n                if producto.codigo == valor:\r\n                    resultados.append(producto)\r\n            elif criterio == 2:\r\n                if valor in producto.nombre.lower():\r\n                    resultados.append(producto)\r\n            elif criterio == 3:\r\n                if valor in producto.categoria.lower():\r\n                    resultados.append(producto)\r\n\r\n        return resultados\r\n\r\nclass Inventario:\r\n    def Agregar(self):\r\n            try:\r\n                cod = input(\"Ingrese código del producto: \")\r\n                if cod in Dic_inventario:\r\n                    print(\" Ya existe un producto con ese código.\")\r\n                    return\r\n\r\n                nom = input(\"Ingrese nombre del producto: \")\r\n                cat = input(\"Ingrese categoría: \")\r\n                pre = float(input(\"Ingrese precio del producto: \"))\r\n                sto = int(input(\"Ingrese cantidad del producto: \"))\r\n\r\n                p = Producto(cod, nom, cat, pre, sto)\r\n                Dic_inventario[cod] = p\r\n                print(\" Producto agregado con éxito.\")\r\n            except ValueError:\r\n                print(\"Error: Ingresaste un dato inválido.\")\r\n\r\n    def actualizar(self, precio=None, stock=None):\r\n        if precio is not None:\r\n            self.precio = precio\r\n        if stock is not None:\r\n            self.stock = stock\r\n\r\n    def eliminar(self,codigo=None):\r\n        eli=input(\"ingrese codigo de producto a eliminar\")\r\n        if eli   not in Dic_inventario:\r\n            print(\"no existe en dicionario\")\r\n        else:\r\n            eliminado=Dic_inventario.pop(eli)\r\n            print(f\"producto Eliminado{eliminado}\")\r\n            print(\"eliminado con exito\")\r\n\r\ndef Submenu():\r\n    print(\"\\nFormas de ordenar el inventario\")\r\n    print(\"1. Por Nombre\")\r\n    print(\"2. Por Precio\")\r\n    print(\"3. Por Stock\")\r\n\r\ndef SubmenuBuscador():\r\n    print(\"\\nFormas de buscar el producto\")\r\n    print(\"1. Por Código\")\r\n    print(\"2. Por Nombre\")\r\n    print(\"3. Por Categoria\")\r\n\r\n\r\nmain()\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/proyecto 1.py b/proyecto 1.py
--- a/proyecto 1.py	(revision 5420c1ee9ad588fb7612edc74c2ebf1a4f2132f4)
+++ b/proyecto 1.py	(date 1755564072760)
@@ -3,7 +3,6 @@
     inven = Inventario()
     order = Ordenar()
     bus = Buscar()
-
     op = 0
     while op != 6:
         try:
